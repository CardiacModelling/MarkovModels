[[model]]
name: Beeler-Reuter-1977
desc: """
The 1977 Beeler Reuter model of the AP in ventricular myocytes.

Implemented in Myokit following the equations found in [1].

[1] Reconstruction of the action potential of ventricular myocardial fibres
    G.W. Beeler and H. Reuter
    1977, The Journal of Physiology

"""
membrane.pOpen = 0
membrane.pClosed = 1
membrane.pInactive = 0

[engine]
time = 0 bind time
pace = 0 bind pace

[membrane]
P0 = 2.26E-04
P1 = 0.0699
P2 = 3.45E-05
P3 = 0.05462
P4 = 0.0873
P5 = 8.92E-03
P6 = 5.150E-3
P7 = 0.03158
G = 0.1524

Kout = 4
Kin  = 130
R = 8314.5
T = 293
F = 96485
z=1

C = 1 [uF/cm^2] : The membrane capacitance
V = -80
#Transition rates
k1 = P0 * exp(P1*V)
k2 = P2 * exp(-P3*V)
k3 = P4 * exp(P5*V)
k4 = P6 * exp(-P7*V)

pInactiveClosed = 1 - pClosed - pOpen - pInactive

dot(pClosed) = (-k1 + k3)*pClosed + k2*pOpen + k4 * pInactiveClosed
dot(pOpen)   = -(k2 + k3) * pOpen + k1*pClosed + k4*pInactive
dot(pInactive) = -(k2 + k4)*pInactive + k3*pOpen + k1*pInactiveClosed

#Nernst potential
E = R*T/(1 * F) * log(Kout/Kin) 

Current = membrane.G * pOpen*(V - E)

[[protocol]]
# Level  Start    Length   Period   Multiplier

[[script]]
import matplotlib.pyplot as plt
import myokit

#
# This example file plots a single AP using the model develope by Beeler
# and Reuter.
#

# Get model and protocol, create simulation
m = get_model()
p = get_protocol()
s = myokit.Simulation(m, p)

# Run simulation
d = s.run(1000)

# Display the result
plt.figure()
plt.plot(d['engine.time'], d['membrane.pOpen'])
plt.show()

